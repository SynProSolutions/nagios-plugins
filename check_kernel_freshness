#!/usr/bin/perl

# Author: Michael Renner <michael.renner@amd.co.at>

# License: Unclear due to ppt's unclear licensing status
# See http://search.cpan.org/~cwest/ppt-0.14/

# This module checks if the current running kernel matches the installed one.
# See the documentation at the end of the file or use --help

# Todo:
# *) Clarify license status?
# *) testen mit:
# *) sles
# *) fedora/centos/rhel
# *) publishing: nagios-plugins.org oder formorer

use strict;
use warnings;

use Getopt::Long;
use Pod::Usage;
use Carp;

my $help;
my $kernel_image;
my $heuristic;
my $long_help;

GetOptions(
    'help|h'           => \$help,
    'long-help'        => \$long_help,
    'kernel-image|k:s' => \$kernel_image,
    'heuristic'        => \$heuristic,
) or pod2usage( -verbose => 0 );

pod2usage( -verbose => 1 ) if ($help);
pod2usage( -verbose => 2 ) if ($long_help);

# eg:
# Linux version 2.6.30-bpo.2-amd64 (Debian 2.6.30-7~bpo50+1) (nobse@debian.org) (gcc version 4.3.2 (Debian 4.3.2-1.1) ) #1 SMP Fri Sep 18 11:50:10 UTC 2009

my $versionRE = qr!
	^			# Line Begin Anchor
	(?:Linux\sversion\s)?	# Optional prefix found in /proc/version
	(\d+\.\d+\.\d+\S+)	# Kernel Version
	.*			# Match as much as possible
	(			# Start buildtime block
 	\#\d+			# Start with the build number
	.*			# Match anything
	20\d{2}			# Finish with the year, not year 2100 compliant.
	)			# End buildtime block
	$			# Line end anchor
!x;

my ( $running_version, $running_buildtime ) = fetch_running_version();
my ( $filename, $image_version, $image_buildtime ) =
  fetch_image_version($kernel_image);

# Include real filename if target is a symlink
$filename .= ' -> ' . readlink($filename) if ( -l $filename );

if ( $running_version ne $image_version ) {
    print
"WARNING: Mismatch between running ($running_version) and image $filename ($image_version) kernel version\n";
    exit 1;
}

if ( $running_buildtime ne $image_buildtime ) {
    print
"WARNING: Mismatch between running ($running_buildtime) and image $filename ($image_buildtime) kernel build time\n";
    exit 1;
}

print
"OK: Running Kernel ($running_version) matches installed version ($filename)\n";
exit 0;

########
# Subs #
########

sub fetch_running_version {

    open( my $fh, '<', '/proc/version' ) or croak "Can't open $filename: $!";

    my $version_line = <$fh>;

    close($fh) or croak "Can't close $filename: $!";

    my ( $running_version, $running_buildtime ) =
      $version_line =~ m/$versionRE/;

    croak "Didn't get a version line out of /proc/version"
      unless $running_version;

    return $running_version, $running_buildtime;
}

sub fetch_image_version {

    my ($filename) = @_;

    if ( !$filename ) {
        for my $prefix (qw( / /boot/)) {
            if ( -e $prefix . 'vmlinuz' ) {
                $filename = $prefix . 'vmlinuz';
                last;
            }
        }
    }

    if ( !$filename ) {
        if ($heuristic) {
            $filename = find_kernel_image();
            croak
"Heuristic couldn't find a kernel image matching /vmlinuz* or /boot/vmlinuz*\n"
              unless $filename;
        }

        else {
            croak
"Couldn't find a kernelimage at /vmlinuz and /boot/vmlinuz. Please either supply one or use the heuristic mode\n";
        }
    }

    my $image_version;

    open( my $fh, '<', $filename ) or croak "Can't open $filename: $!";

# This is a fast but ugly implementation of strings(1), taken from Perl Power Tools (ppt)

    my $offset    = 0;
    my $chunksize = 4096;

    my $punctuation = join '\\', split //, q/`~!@#$%^&*()-+={}|[]\:";'<>?,.\//;
    my $printable = '\w \t' . $punctuation;
    my $string;

    while ( $_ or read( $fh, $_, $chunksize ) ) {
        $offset += length($1) if s/^([^$printable]+)//o;
        $string = '';

        do {
            $string .= $1 if s/^([$printable]+)//o;
        } until ( $_ || !read( $fh, $_, $chunksize ) );

        # Longer than
        # #1 SMP Fri Sep 18 11:50:10 UTC 2009

        if ( length($string) >= 40 && $string =~ m/$versionRE/ ) {
            $image_version   = $1;
            $image_buildtime = $2;
            last;
        }

        $offset += length($string);
    }
    close $fh or croak "Can't close $filename: $!";

    croak "Didn't get a version line out of $filename" unless $image_version;

    return $filename, $image_version, $image_buildtime;
}

sub find_kernel_image {

    for my $directory (qw( / /boot/)) {
        my @entries = glob "$directory" . 'vmlinuz*';

        my ( @symlinks, @files );

        for my $entry (@entries) {
            push @symlinks, $entry if ( -l $entry );
            push @files,    $entry if ( -f $entry );
        }

        # Return the _SHORTEST_ symlink
        if (@symlinks) {
            return ( sort { length($a) <=> length($b) } @symlinks )[0];
        }

   # If no suitable symlink exist - return the kernel with the "highest" version
        if (@entries) {
            return ( reverse sort { sort_versionstring() } @entries )[0];
        }
    }
    return;
}

sub sort_versionstring {

# Sorts given filenames from lowest to highest version number
# If it fails to parse a given version number it puts the file before the smallest parseable file

    my $filenameRE = qr/vmlinuz.*?(\d+\.\d+\.\d+)/;

    my ($version_a) = $a =~ m/$filenameRE/;
    my ($version_b) = $b =~ m/$filenameRE/;

    return -1 unless ( defined $version_a );
    return 1  unless ( defined $version_b );

    my @elems_a = split /\./, $version_a;
    my @elems_b = split /\./, $version_b;

    croak "Uneven number of version parts in $a, $b\n"
      unless ( @elems_a == @elems_b );

    for my $elem ( 0 .. $#elems_a ) {
        my $result = $elems_a[$elem] <=> $elems_b[$elem];
        return $result if ($result);
    }

    return 0;
}

__END__

=head1 NAME

check_kernel_freshness - A Nagios plugin to check if a given Linux system is running the installed kernel


=head1 SYNOPSIS

check_kernel_freshness [ -k --kernel-image filename ] [ --heuristic ]


   Options:
  -k, --kernel-image	Filename of the kernel image to check (default: /vmlinuz, /boot/vmlinuz)
      --heuristic	Enable heuristic to search for a kernel image filename
  -h, --help		Show documentation
      --long-help	Show long documentation (needs perldoc)


=head1 OPTIONS

=over 8

=item B<--kernel-image>

Filename of the kernel image to check.

B<Default>: /vmlinuz, /boot/vmlinuz

=item B<--heuristic>

Enables heuristic to search for a kernel image filename.

When enabled, the plugin will search first / and then /boot for

=over

=item *) A symlink whose name starts with vmlinuz.

If multiple symlinks are found, the symlink with the shortest name is used

=item *) A file whose name starts with vmlinuz.

If multiple files are found, the list is sorted by version strings and the filename with the highest version is used

=back

The first matching occurance is then used.

=back

=head1 DESCRIPTION

B<check_kernel_freshness> is a Nagios plugin which checks if the running kernel matches the version of the installed kernel.

This is useful to see if a server needs to be rebooted after a kernel upgrade.

=head2 Modus operandi

This plugin compares kernel version and build timestamp gathered from /proc/version with a string containing similiar information in a given kernel image. If kernel version or timestamp shouldn't match, a warning is raised.

=cut
