#!/usr/bin/perl

# Author: Michael Renner <michael.renner@amd.co.at>

# License: Unclear due to ppt's unclear licensing status
# See http://search.cpan.org/~cwest/ppt-0.14/

# This module checks if the current running kernel matches the installed one.
# It does this by comparing the output of /proc/version with the version string
# found in the kernel image at /vmlinuz
#
# As an additional (albeit superfluous?) check it compares if the current
# exceeds the build date of the current running kernel.


# Todo:
# *) getopt
# *) help
# *) testen mit:
# *) sles
# *) fedora/centos/rhel
# *) nagios-plugins.org oder formorer


use strict;
use warnings;

use File::Slurp;
use Date::Parse;
use Getopt::Long;
use Pod::Usage;
use Carp;

my $help;
my $kernel_image;
my $heuristic;

GetOptions(
		'help|h'		=> \$help,
		'kernel-image|k:s'	=> \$kernel_image,
		'heuristic'		=> \$heuristic,
) or pod2usage( -verbose => 0 );

pod2usage( --verbose => 2 ) if ($help);

my $versionRE = qr/
	.*	# Match as much as possible
	(
 	\#\d+	# Start with the build number
	.*	# Match anything
	20\d{2}	# Finish with the year, not year 2100 compliant.
	)
	$
/x;

my $running_version = fetch_running_version();
my $image_version   = fetch_image_version($kernel_image);

if ( $running_version ne $image_version ) {
    print
"WARNING: Mismatch between running ($running_version) and image ($image_version) kernel build time\n";
    exit 1;
}

print "OK: Running Kernel ($running_version) matches installed version ($running_version)\n";
exit 0;

########
# Subs #
########


sub fetch_running_version {

    my $version_line = read_file('/proc/version');

# eg:
# Linux version 2.6.30-bpo.2-amd64 (Debian 2.6.30-7~bpo50+1) (nobse@debian.org) (gcc version 4.3.2 (Debian 4.3.2-1.1) ) #1 SMP Fri Sep 18 11:50:10 UTC 2009

    my ($running_version) = $version_line =~ m/$versionRE/;

    croak "Didn't get a version line out of /proc/version"
      unless $running_version;

    return $running_version;
}

sub fetch_image_version {

    my ($filename) = @_;
    my $image_version;

    open( my $fh, '<', $filename ) or croak "Can't open $filename: $!";

# This is a fast but ugly implementation of strings(1), taken from Perl Power Tools (ppt)

    my $offset    = 0;
    my $chunksize = 4096;

    my $punctuation = join '\\', split //, q/`~!@#$%^&*()-+={}|[]\:";'<>?,.\//;
    my $printable = '\w \t' . $punctuation;
    my $string;

    while ( $_ or read( $fh, $_, $chunksize ) ) {
        $offset += length($1) if s/^([^$printable]+)//o;
        $string = '';

        do {
            $string .= $1 if s/^([$printable]+)//o;
        } until ( $_ or !read( $fh, $_, $chunksize ) );

        # Longer than
        # #1 SMP Fri Sep 18 11:50:10 UTC 2009

        if ( length($string) >= 40 && $string =~ m/$versionRE/ ) {
            $image_version = $1;
            last;
        }

        $offset += length($string);
    }
    close $fh;

    croak "Didn't get a version line out of /vmlinuz" unless $image_version;

    return $image_version;
}
